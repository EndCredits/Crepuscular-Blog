{"title":"Build a Kernel for Redmi K30 5G by your self.","uid":"e20d5da4f42b631173f808fe36add280","slug":"Build-Kernel","date":"2022-07-19T16:00:00.000Z","updated":"2022-10-12T06:49:29.710Z","comments":true,"path":"api/articles/Build-Kernel.json","keywords":null,"cover":"https://camo.githubusercontent.com/b5d933cd654170ee36b79df0e26df2bc772efa7c36bd2644f8a1cd7744061f69/68747470733a2f2f66646e322e67736d6172656e612e636f6d2f76762f706963732f7869616f6d692f7869616f6d692d7265646d692d6b33302d35672d322e6a7067","content":"<p>为自己的 Redmi K30 5G 编译一个 Linux 内核吧~ | 顺便记录一下自己编译内核的历程</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-系统软件包\"><a href=\"#1-系统软件包\" class=\"headerlink\" title=\"1.系统软件包\"></a>1.系统软件包</h2><p>不同的系统需要不同的软件包，其实下面的软件包已经足以支撑整个 AOSP 的编译，</p>\n<ol>\n<li><p>Ubuntu&#x2F;Debian 系:</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig</code></pre>\n</li>\n<li><p>REHL&#x2F;CentOS&#x2F;Alma&#x2F;Rocky&#x2F;Fedora 系:</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">dnf install @development-tools android-tools automake bison bzip2 bzip2-libs ccache curl dpkg-dev gcc gcc-c++ gperf libstdc++.i686 libxml2-devel lz4-libs lzop make maven ncurses-compat-libs openssl-devel pngcrush python python3 python3-mako python-mako python-networkx schedtool squashfs-tools syslinux-devel zip zlib-devel zlib-devel.i686 </code></pre>\n</li>\n<li><p>openSUSE 系:</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo zypper install bison curl flex git gnupg gperf libesd-devel liblz4-1 ncurses-devel libSDL-devel python-wxWi dgets-devel libxml2-2 libxml2-tools lzop  schedtool squashfs libxslt1 zip zlib-devel make gcc-c++ glibc-devel-32bit ncurses-devel-32bit readline-devel-32bit libz1-32bit &amp;&amp; sudo zypper install --type pattern devel_basis</code></pre>\n</li>\n<li><p>Arch 系:</p>\n<p> 如果直接使用 AUR 中提供的 <code>aosp-devel</code> 包和 <code>lineageos-devel</code> 包将会非常方便 (下面使用 yay 作为示例)</p>\n<p> 注意 您必须启用 <code>multilib</code> 仓库</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">yay -S lineageos-devel\nsudo pacman -S libxcrypt-compat lib32-libxcrypt</code></pre>\n</li>\n<li><p>Gentoo&#x2F;LFS 等用户</p>\n<p> 我相信你们已经拥有了自己找软件包的能力，嗯</p>\n</li>\n</ol>\n<h2 id=\"2-交叉编译工具链\"><a href=\"#2-交叉编译工具链\" class=\"headerlink\" title=\"2. 交叉编译工具链\"></a>2. 交叉编译工具链</h2><p>众所周知，咱们的电脑是 x86 架构的，如果直接按照 x86 指令集进行编译，那么身为 arm 阵营的手机是理解不了我们编译的内核的，所以我们就需要<code>交叉编译</code>这个工具来帮助电脑把他的语言”翻译”成我们的手机可以理解的的语言</p>\n<p>我们根据 Google 的行为，选择 <code>clang</code> 作为我们的交叉编译工具链，这里我们使用我编译的 <code>crepuscular clang</code> ，或者你也可以使用 <code>proton clang</code> 等等，大同小异</p>\n<p>首先下载 clang :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir -p ~&#x2F;toolchains #或者换成任意你想要把 clang 放在那里的地方\n\ngit clone https:&#x2F;&#x2F;gitlab.com&#x2F;EndCredits&#x2F;clang-crepuscular.git --depth&#x3D;1 ~&#x2F;toolchains&#x2F;clang-crepuscular #记得要跟上面一样的目录</code></pre>\n\n<p>然后为 clang 添加环境变量</p>\n<p>将以下内容添加到 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PATH&#x3D;~&#x2F;toolchains&#x2F;clang-crepuscular&#x2F;bin:$PATH</code></pre>\n\n<p>验证一下我们成功了没有，运行结果里有 crepuscular 就好啦</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">clang --version</code></pre>\n\n<p>到这里系统的准备工作就结束啦</p>\n<h2 id=\"3-准备内核源码并编译\"><a href=\"#3-准备内核源码并编译\" class=\"headerlink\" title=\"3. 准备内核源码并编译\"></a>3. 准备内核源码并编译</h2><p>这里我们使用我修改过的内核源码，从 Github 上 clone</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git clone https:&#x2F;&#x2F;github.com&#x2F;EndCredits&#x2F;android_kernel_xiaomi_sm7250.git -b 12.0-main ~&#x2F;kernel&#x2F;sm7250</code></pre>\n\n<p>因为我的内核内置了编译脚本，所以可以直接用，其实别的支持打包 dtbo 的 4.19 内核里这个脚本也可以用，只不过需要改一下 defconfig 的名字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd ~&#x2F;kernel&#x2F;sm7250\n.&#x2F;build.sh all</code></pre>\n\n<p>编译完成之后就可以获得一个可以刷入的内核包啦</p>\n<h2 id=\"4-手动编译\"><a href=\"#4-手动编译\" class=\"headerlink\" title=\"4. 手动编译\"></a>4. 手动编译</h2><p>其实上面的编译脚本就是把下面这些命令一股脑扔了进去</p>\n<p>首先我们进入到内核的源码目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd ~&#x2F;kernel&#x2F;sm7250</code></pre>\n\n<p>然后我们会用到 <code>make</code> 这个工具，首先我们来告诉编译系统需要往我们的内核里编译什么东西，也就是 <code>defconfig</code> ，如前文所言，这个文件描述了我们的内核里有什么功能，每个机型一般都不一样，你需要找到自己机型对应的配置文件，对于现在的 arm64 机型来说，它一般放置在 <code>arch/arm64/configs/</code> 下，我们 <code>picasso</code> 默认的 <code>defconfig</code> 是 <code>arch/arm64/configs/vendor/picasso_user_defconfig</code> ，我们略去前面复杂的路径 (因为 <code>ARCH=arm64</code> 已经告诉了 <code>make</code> 应该到 <code>arm64</code> 文件夹中来找这个文件)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">make ARCH&#x3D;arm64 LLVM&#x3D;1 O&#x3D;..&#x2F;out -j$(nproc --all) vendor&#x2F;picasso_user_defconfig</code></pre>\n\n<p>上面的命令中，<code>LLVM=1</code> 的作用是启用 <code>LLVM/clang</code> 工具链作为我们的内核编译工具，不然它默认会去寻找 <code>gcc</code> 作为编译工具，<code>-j$(nproc --all)</code> 是告诉编译系统使用所有 CPU 线程并行编译，<code>-j</code>参数后面给出的数字就是你想要同时使用的 CPU 线程数</p>\n<p>如果你想要改变编译进内核的东西，你可以使用 <code>menuconfig</code> 来调整这个文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">make ARCH&#x3D;arm64 LLVM&#x3D;1 O&#x3D;..&#x2F;out -j$(nproc --all) menuconfig</code></pre>\n\n<p>它会为你打开一个非常漂亮的界面，你可以选择启用或者关闭各项内核的功能，如果没有这方面的需求，直接用默认的就好，然后就可以编译内核啦</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">make ARCH&#x3D;arm64 LLVM&#x3D;1 CROSS_COMPILE&#x3D;aarch64-linux-gnu- CROSS_COMPILE_COMPAT&#x3D;arm-linux-gnueabi- CLANG_TRIPLE&#x3D;aarch64-linux-gnu- O&#x3D;..&#x2F;out -j$(nproc --all)</code></pre>\n\n<p>等上一会，内核的编译就完成啦，不过这时候我们得到的内核还只是一个 <code>Image</code>，我们还需要 <code>AnyKernel</code> 来帮助我们把它刷入手机</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd ..&#x2F;out&#x2F;arch&#x2F;arm64&#x2F;boot\ngit clone https:&#x2F;&#x2F;github.com&#x2F;EndCredits&#x2F;AnyKernel3 -b picasso anykernel</code></pre>\n\n<p>这里的 <code>anykernel</code> 是修改过的，只适用于 <code>picasso</code>，如果你想给你的手机也制作一份的话，可以参考这里: </p>\n<p><a href=\"https://github.com/EndCredits/AnyKernel3/commit/ab7be4efcf3b4d11ec33728501d361f63823d393\">ab7be4efcf     anykernel: Adapt to Rosemary kernel for tiffany.</a></p>\n<p><a href=\"https://github.com/EndCredits/AnyKernel3/commit/ca166c32e3b98990b4747c446a7252ca6d760460\">ca166c32e3     adapt to picasso</a></p>\n<p>然后我们把所有的 dtb 文件都连接成一个，方便我们刷入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">find .&#x2F;dts&#x2F;vendor&#x2F;qcom -name &#39;*.dtb&#39; -exec cat &#123;&#125; + &gt; .&#x2F;dtb;</code></pre>\n\n<p>然后就可以开始打包啦</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cp Image .&#x2F;anykernel&#x2F; &amp;&amp; cp dtb .&#x2F;anykernel&#x2F; &amp;&amp; cp dtbo.img .&#x2F;anykernel&#x2F;\n\nzip -q -r Kernel-$(date &#39;+%Z-%Y-%m-%d-%H%M&#39;)-$(make kernelversion)-.zip .&#x2F;anykernel&#x2F;*</code></pre>\n\n<p>这样，内核的打包就到此结束，把上面得到的压缩文件放入手机，就可以愉快的刷入啦</p>\n<hr>\n","feature":true,"text":"为自己的 Redmi K30 5G 编译一个 Linux 内核吧~ | 顺便记录一下自己编译内核的历程 1.系统软件包不同的系统需要不同的软件包，其实下面的软件包已经足以支撑整个 AOSP 的编译， Ubuntu&#x2F;Debian 系: sudo apt-get insta...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%8C%85\"><span class=\"toc-text\">1.系统软件包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E9%93%BE\"><span class=\"toc-text\">2. 交叉编译工具链</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%87%86%E5%A4%87%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%B9%B6%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">3. 准备内核源码并编译</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">4. 手动编译</span></a></li></ol>","author":{"name":"Crepuscular Han","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/64133324","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"凛凛的ROM课堂 -- 笔记","uid":"f1ebc4ebc24f578a07f74f4230f839f5","slug":"凛凛的ROM课堂-笔记","date":"2022-09-26T04:23:24.000Z","updated":"2022-10-12T06:44:15.509Z","comments":true,"path":"api/articles/凛凛的ROM课堂-笔记.json","keywords":null,"cover":"https://avatars.githubusercontent.com/u/30337499?v=4","text":"前一段 b 站直播凛凛没开麦… 斗胆加上一点点自己的理解，也记录一下自己做 rom 的一点点经验，算是为开源社区贡献一份自己微薄的力量 基本结构最基础的文件有以下几个 cce87ff thyme: Initial tree from lisa ROOT |-Android.bp ...","link":"","photos":[],"count_time":{"symbolsCount":"51k","symbolsTime":"47 mins."},"categories":[],"tags":[],"author":{"name":"Crepuscular Han","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/64133324","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}